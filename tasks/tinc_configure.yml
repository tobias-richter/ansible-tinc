# Inspired by https://github.com/thisismitch/ansible-tinc
- name: "Set common facts"
  set_fact:
    _tinc_hostname: "{{ inventory_hostname | replace('.','_') | replace('-','_') }}"
    _tinc_net_path: "/etc/tinc/{{ tinc_netname }}"
    _tinc_custom_host_config_state: present

- name: "Set custom host config state to absent when not defined"
  set_fact:
    _tinc_custom_host_config_state: absent
  when: tinc_host_conf_custom is not defined

- name: ensure tinc netname directories exists
  file:
    path: "{{ item }}"
    recurse: True
    state: directory
    owner: "{{ tinc_user }}"
    group: "{{ tinc_group }}"
  with_items:
    - "{{ _tinc_net_path }}"
    - "{{ _tinc_net_path }}/hosts"

- name: create /etc/tinc/nets.boot file from template
  copy:
    content: "{{ tinc_netname }}"
    dest: /etc/tinc/nets.boot
    owner: "{{ tinc_user }}"
    group: "{{ tinc_group }}"
  notify:
    - Restart Service

- name: ensure tinc hosts file binds to physical ip address
  lineinfile:
    dest: "{{ _tinc_net_path }}/hosts/{{ _tinc_hostname }}"
    regexp: "^Address ="
    line: "Address = {{ tinc_control_plane_bind_ip }}"
    create: yes
  when: inventory_hostname in groups['tinc_spine_nodes']
  notify:
    - Restart Service

- name: ensure subnet ip address is properly set in tinc host file
  blockinfile:
    path: "{{ _tinc_net_path }}/hosts/{{ _tinc_hostname }}"
    marker: "# {mark} tinc vpn ip setting in router mode ANSIBLE MANAGED BLOCK"
    block: "Subnet = {{ tinc_vpn_ip }}/32"
    create: yes
  when: tinc_mode == 'router'
  notify:
    - Restart Service

- name: "Ensure custom host configuration is {{ _tinc_custom_host_config_state }}"
  blockinfile:
    path: "{{ _tinc_net_path }}/hosts/{{ _tinc_hostname }}"
    marker: "# {mark} custom host config ANSIBLE MANAGED BLOCK"
    block: "{{ tinc_host_conf_custom | default('') }}"
    create: yes
    state: "{{ _tinc_custom_host_config_state }}"
  notify:
    - Restart Service

- name: Deploy conf, up and down files.
  template:
    src: "{{ item }}"
    dest: "{{ _tinc_net_path }}/{{ item | basename | splitext | first }}"
    owner: "{{ tinc_user }}"
    group: "{{ tinc_group }}"
    mode: u=rwx,g=rx,o=
  with_items:
    - subnet.pl.j2
    - subnet-down.j2
    - subnet-up.j2
    - tinc-up.j2
    - tinc-down.j2
    - tinc.conf.j2
  tags:
    - connection
  notify:
    - Restart Service

- name: check whether /etc/tinc/netname/hosts/inventory_hostname contains "-----END RSA PUBLIC KEY-----"
  command: awk '/^-----END RSA PUBLIC KEY-----$/'  {{ _tinc_net_path }}/hosts/{{ _tinc_hostname }}
  changed_when: "public_key.stdout != '-----END RSA PUBLIC KEY-----'"
  register: public_key

# this is necessary because the public key will not be generated (non-interactively) if the private key already exists
- name: delete private key and regenerate keypair if public key is absent from tinc hosts file
  file:
    path: "{{ _tinc_net_path }}/rsa_key.priv"
    state: absent
  when: public_key.changed

- name: create tinc private key (and append public key to tincd hosts file)
  command: "tincd -n {{ tinc_netname }} -K{{ tinc_key_size }}"
  args:
    creates: "{{ _tinc_net_path }}/rsa_key.priv"
  notify:
    - Restart Service

- name: Delete absent hosts
  file:
    path: "{{ _tinc_net_path }}/hosts/{{ item }}"
    state: absent
  with_items: "{{ tinc_hosts_absent }}"

- name: fetch tinc hosts file after key creation
  fetch:
    src: "{{ _tinc_net_path }}/hosts/{{ _tinc_hostname }}"
    dest: "fetch/{{ _tinc_hostname }}"
    flat: yes

# Note: Currently the synchronize module requires passwordless sudo
- name: sync the fetched tinc hosts files on each host
  synchronize:
    src: fetch/
    dest: "{{ _tinc_net_path }}/hosts/"
    use_ssh_args: yes
    rsync_opts:
      - "--chown={{ tinc_user }}:{{ tinc_group }}"
  when: ansible_os_family != "OpenWrt"
  tags: sync
  notify:
    - Restart Service

- name: OpenWRT sync the fetched tinc hosts files on each host
  synchronize:
    src: fetch/
    dest: "{{ _tinc_net_path }}/hosts/"
    use_ssh_args: yes
    # By default rsync_path is 'sudo rsync' OpenWRT typically does not have sudo
    rsync_path: rsync
    rsync_opts:
      # rsync on OpenWRT lacks old-style --compress due to its external zlib
      - "-zz"
      - "--chown=root:root"
  tags: sync
  when: ansible_os_family == "OpenWrt"
  notify:
    - Restart Service

- name: add nodes to /etc/hosts (ansible_inventory resolves to vpn_ip)
  lineinfile:
    dest: /etc/hosts
    regexp: "^{{ hostvars[item].tinc_vpn_ip }}"
    line: "{{ hostvars[item].tinc_vpn_ip }} {{ item }}"
    state: present
  when: hostvars[item].tinc_vpn_ip is defined
  with_items: "{{ play_hosts }}"
  tags:
    - tinc_internal_hosts

- name: Enable ip forwarding.
  sysctl:
    name: "net.ipv4.ip_forward"
    value: "1"
    state: "present"
  notify:
    - Restart Service

# Ensure the systemd daemon is reloaded and the service is restarted
- meta: flush_handlers

- name: ensure tinc is enabled
  service:
    name: "{{ tinc_service_name }}"
    enabled: yes
